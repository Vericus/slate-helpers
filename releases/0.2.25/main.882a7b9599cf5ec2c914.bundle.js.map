{"version":3,"file":"main.882a7b9599cf5ec2c914.bundle.js","sources":["webpack:///../src/readOnly.tsx"],"sourcesContent":["import isHotKey from \"is-hotkey\";\nimport { Plugin } from \"slate\";\nimport * as React from \"react\";\n\nexport default function ReadOnly(): Plugin {\n  const COPY = isHotKey(\"mod+c\");\n\n  function onKeyDown(e, editor, next) {\n    if (COPY(e)) return next();\n    if (!editor.props.isReadOnly) return next();\n    e.preventDefault();\n    e.stopPropagation();\n    return true;\n  }\n\n  function onBeforeInput(e, editor, next) {\n    if (!editor.props.isReadOnly) return next();\n    e.preventDefault();\n    e.stopPropagation();\n    return true;\n  }\n\n  function onDrop(e, editor, next) {\n    if (!editor.props.isReadOnly) return next();\n    e.preventDefault();\n    e.stopPropagation();\n    return true;\n  }\n\n  function onInput(e, editor, next) {\n    if (!editor.props.isReadOnly) return next();\n    e.preventDefault();\n    e.stopPropagation();\n    return true;\n  }\n\n  function onCut(e, editor, next) {\n    if (!editor.props.isReadOnly) return next();\n    e.preventDefault();\n    e.stopPropagation();\n    return true;\n  }\n\n  function renderEditor(props, editor, next) {\n    const children = next();\n    const childrenWithReadOnly = React.Children.map(children, child =>\n      React.cloneElement(child, {\n        spellCheck: editor.props.isReadOnly ? false : editor.props.spellCheck\n      })\n    );\n    return <React.Fragment>{childrenWithReadOnly}</React.Fragment>;\n  }\n\n  return {\n    renderEditor,\n    onInput,\n    onDrop,\n    onKeyDown,\n    onBeforeInput,\n    onCut\n  };\n}\n"],"mappings":"AAIA","sourceRoot":""}